
DCP - 10th Apr. 2023 - 7AM IST to 9AM IST


########################
Day - 1 | 10th Apr. 2023
########################

	DevOps Introduction!
			
		Overview ::::
			
		What is DevOps ???
			
		All about Sofware Development Strategy!!!!
		
		
		SDLC --> Software Development Lifecycle!
		
			Requirement Analysis
			Design
			Development
			Test
			Implementation 
			Monitoring/Maint..
	
		Waterfall Model.		Linear Approach.
		
			Requirement Analysis
			Design
			Development
			Test
			Implementation/Deployment 
			Monitoring/Maint..
			
		Project1 :: Waterfall Model 6month
		
		Project2
		
			Requirement Analysis
			Design
			Development
			Test
			Implementation/Deployment 
			Monitoring/Maint..
			
			
		Agile Methodologies
		
		Modules -- Iterations
		
		Project: Online User Registration System
		
			Sign-up
			Sign-in
			Enrole for the product
		
		Iteration 1 : Sign-up
			Requirement Analysis
			Design
			Development
			Test
			Implementation/Deployment 
			Monitoring/Maint..

		Iteration 2 : Sign-In
			Requirement Analysis
			Design
			Development
			Test
			Implementation/Deployment 
			Monitoring/Maint..

		Iteration 3 : New_Changes
			Requirement Analysis
			Design
			Development
			Test
			Implementation/Deployment 
			Monitoring/Maint..
			
		For Production Deployment 
			
		Continuous Integration 
		
		Continuous Delivery 
		
		Continuous Deployment 
		
	
		DevOps --> Sofware Development Strategy!!!!
		
			Continuous Integration 
			Continuous Delivery 		
			Continuous Deployment
			
		E_Commerce == > www.amazon.com
		
		Sign-up		==> Developer1 --> developer the src code --> test the src code --> promote the changes for further testing --> Prod deployment		
		Sign-In		==> Developer2 --> developer the src code --> test the src code --> promote the changes for further testing --> Prod deployment
		Search 
		Add to cart 
		place the order 
		make payment
		confirm order 
		track the order 
		
	
		Application Architecture :::
		
			Monolith Application Architecture
			
			
			Micro Service based Application Architecture
	

	Service	:::
	
		Sign-up		==> Developer1 --> developer the src code --> test the src code --> promote the changes for further testing --> Prod deployment		
		Sign-In		==> Developer2 --> developer the src code --> test the src code --> promote the changes for further testing --> Prod deployment
		Search 
		Add to cart 
		place the order 
		make payment
		confirm order 
		track the order 			
			
			
		
		Tele-Comm :::
		
			Tele-Comm SP1 -->	Introduce a new plan / offer 
			Tele-Comm SP2 -->	Introduce a new plan / offer 
			
			
		Examples ::::

			Continuous Delivery :
			
			Banking Systems 
			Finace / INS 
			
			Production Deployment Window ::: 4hrs and 6hrs. Non-Business hours 
			Manual Approvals from all the stake holders 
			
			
			Continuous Deployment : 
			
			Amazon.com 
			Netflix 
			Facebook 
			
		DevOps - Strategy / Process 
		
		
			Speed up the product development to deployment!
			
			Team ::
			
				Infra-Structure Team 		-- Provision infra - Tools 
				Dev Team 					-- Improve the productivity 
				Testing Team
				Release Management 
				Prod Support Team 
				Prod Monitoring Team 
				Security Team 
				
				
			DevOps Team :::
			
			What is DevOps ?
			
				DevOps is a Software Development strategy which promotes collaboration between Development and Operations Teams to achieve Continuous Integration & Continuous Delivery/Deployment in more automated fashion.

			What are the various Stages of DevOps ?
			
				Continuous Development ::		===> 
					IDE, Co
					Tradition process :: Code, Build (Compile & Create artifacts) perform Unittesting, promote the code to testing environments manually)					
					Thru DevOps Automation :: CI/CD -- > Build (Compile & Create artifacts) perform Unittesting, promote the code to testing environments automatically)
				Continuous Integration
					promote the code to testing environments automatically
				Continuous Testing
					Continuous Testing --> Test automation tools -- > Test data, test scenarios, test cases 
					
				Continuous Delivery		--> Will enforce manual approval from all stake holders before production release 
				
				Continuous Deployment	--> No Manual approvals need for production release
				
				Continuous Monitoring  --> Monitoring Prod Environment


				Feedback.
				
				Continuous IMPROVEMENT 
			
			DevSecOps ==> 
			
			What are the various DevOps Tools ?
		
########################
Day - 2 | 11th Apr. 2023
########################

			DevOps ::
			
				People 
				Strategy / Process 
				Tools 
				
			DevOps - Associates , Engg., Lead , Architects , Consultants 
			
			
			What are the various DevOps Tools ?
			
				Continuous Development ::		
					===> IDE - Eclipse based IDEs, Visual Studio Code, Pycharm, Intellij, Vstudio
							GIT -- SCM 
							
					Application Build ==> Is a process of compiling the source code & Creating Artifacts (binaries - 0 & 1s)
										*.war *.jar *.exec *.dll files
					
					Tradition process :: Code, Build (Compile & Create artifacts) perform Unittesting, promote the code to testing environments manually)	
					
					Thru DevOps Automation :: CI/CD -- > Build (Compile & Create artifacts) perform Unittesting, promote the code to testing environments automatically)
					
				Continuous Integration
					===> Jenkins, Maven, ant, Gradle  
					
					promote the code to testing environments automatically
				Continuous Testing
					===> Jenkins, Testing Tools - Junit, TestNG, Selenium
					Continuous Testing --> Test automation tools -- > Test data, test scenarios, test cases 
					
				Continuous Delivery		--> Will enforce manual approval from all stake holders before production release 
					===> Jenkins, Tomcat/Nginx, Ansible, Docker, Kubernetes 
				
				Continuous Deployment	--> No Manual approvals need for production release
					===> Jenkins, Tomcat/Nginx, Ansible, Docker, Kubernetes
				
				Continuous Monitoring  --> Monitoring Prod Environment
					===> Jenkins, Promethes/Grafana/Splunk/Nagios/AppDynamics
					
					Infra-Structure
						:	Promethes/Grafana/Splunk/Nagios/					
					Applications 
						:	AppDynamics


				Continuous IMPROVEMENT 
				
				
				Plan ==> ALM Tools --> Application Lifecycle Management Tools - Jira, Az Boards
				
				
				Jenkins ==> Build Orchestration Tool
				bamboo
				gitlab-ci
				az-pipeline
				aws-codepipeline
				
				
			Environments ::::
			
			Non-Prod Environments												Prod Environment
			
			Dev 
			Build 
			Testing 
				QA 
				UAT 
				Pre-Prod 
				Staging 							=====>						Prod Environment
					
			
			Servers -- Computing Devices --> Virtual Machines ( Linux / Windows )
			
			Cloud Platform -- AWS / Azure / GCP
			
			AWS - Cloud Platform 
			
			1. Create AWS Free - Tier Account.
			2. github Account 
			3. dockerhub Account 
						
			GITHUB Account Creation:
				https://github.com/  				===> Remote GIT Repository (Collection of Files & Folders)
			
			AWS Account Creation:
				https://aws.amazon.com/console/  	===> Create AWS Account				
					Valid Email 
					Valid Mobile number
					Valid Credit/Debit Card ==> Should be enabled with International Transaction!
					
			DockerHub Account Creation:
				https://hub.docker.com/

			Tools ::
			
				Visual Studio Code :
					https://code.visualstudio.com/download
					
				SSH Clients :	
					MobaXterm		(Windows)
						https://mobaxterm.mobatek.net/download.html
						
					Putty			(Mac)
						https://www.putty.org/
						https://www.ssh.com/academy/ssh/putty/mac	

				Install GIT :			
					https://git-scm.com/downloads
			
	Next :
	
		Version Control System using GIT

########################
Day - 3 | 12th Apr. 2023
########################

		Version Control System using GIT!
		
			-	New Requirement :::
					Code --> Source Code development 
					build 
					Create Artifacts 
					Unit Testing

			Developer1 :::: java Web application :::
			
			index.jsp 
				
				<html>
				asdf
				sd
				fs
				df
				sdf
				scenariosf
				scenariosdf
				</html>
		
			saved ==> index.jsp , unit testing 
			
			index.jsp 
				
				<html>
				asdf
				sd
				fs
				df
				sdf
				scenariosf
				scenariosdf
				asdfasdf
				ds
				af
				dataf
				asdf
				</html>
				
			saved ==> index.jsp , unit testing 
			
			1....10 changes 

				<html>
				asdf
				sd
				fs
				df
				sdfsafasdf
				asdfdf
				asdff
				sd
				scenariosf
				scenariosdf
				asdfasdf
				ds
				af
				dataf
				asdf
				</html>
				
		Track the Changes.
		Version Control the Changes.
		
		index.jsp_v1.0 					5 lines code 
		index.jsp_v1.1 					+5 lines code 
		index.jsp_v1.2 					+5 lines code 
		index.jsp_v1.3 					+5 lines code   ===> QA Tesing ===> UAT Testing ==> Prod_Envi.
		
		Deploy ===> Deployment window. 4 - 6hrs 
		
			- Fix the issue 
			- Revert the changes
			
		index.jsp_v1.3 				to index.jsp_v1.2 
		
		index.jsp 
		index.jsp 
		index.jsp 
		index.jsp 
		
		Tags / Version_Number / Commit_IDs 
		
			jdk 1.7 / 1.8 (Release ID/Tag)  
			
			incremental changes on 1.8 version --- 1..100
			
			jdk 1.9 
		
		Version Control System like GIT 

			-	Track the Changes.
			-	Version Control the Changes.
			
			Types :
			
				Local Version Control System 
				Centralized VCS 
				Distributed VCS 
				
		
		How to work on Distributed VCS :::	
		
		GIT - is Open Source Distributed VCS.
			
		
		index.html ===> 
		
			rec1
			rec2
			rec3 
			
		commit -- commit_ID1
				
		
		index.html ===> 
		
			rec1
			rec2
			rec3 
			rec4
			rec5

		commit -- commit_ID2
		
		commit -- commit_ID2
		
		parallel development -- Branching Techniques
		
		GIT : 		
			Open Distributed VCS 
			Used to Version Control the changes 
			Used to Track the Changes 
			Used to perform parallel Development 
			
		
		Working on GIT 
		
			Install Git ==> Window/Linux/Mac 
			
			Git File Workflow :::
			
			Local Machine (Local GIT Repository)									Remote Server (Remote GIT Repository)
			
			Working Directory  --> Staging Area --> Local Repository				Remote Repository
			
			
		Project ::::
		
			1. New Project :
				Developed in Local Dev Machine (Local Repo)		==> 	Remote Repo. 
				
			2. Change Requests 
			3. Bug fixing 	
			
				Remote Repo  ===> Local Repo. ==> Make necessary Changes ==> Push the changes back to Remote Repo. 
			index.html 
			
			
		
		git clone 		===> Copy/Clone the entire remote repo. to local (As per best practise - Should be one time activity)
		git add			===> Used to add the changes from Working Dir. to Staging Area 
		git commit 		===> Used to commit the changes from staging are to Local Repo.
		
		git push 		===> Used to push the changes from local repo. to remote repo.
		
		git fetch & git pull
		===> Both git fetch & git pull are used to handle incremental changes from remote repo.
		
		git fetch 	==> Used to check if there is any incremental changes happened in the remote repo.
						If there are any changes available, git fetch will just update the local repo. with that changes. 
						But it will NEVER update the working directory.
						
		git pull 	==> Used to check if there is any incremental changes happened in the remote repo.
						If there are any changes available, git pull will update the local repo. as well as the working directory with that changes.
						
						
						
		Remote Repo. 
		
			Project_javawebapp1
				
				*.java
				*.jsp1
				*.jsp2
			
			
		
		Local Repo. 
		
			*.jsp1 
			
			
			fetch ===> *.jsp1 & *.jsp2 
			
			git checkout 
			git merge to *.jsp1 
			
			
			
		index.html ==> 
		
		
		Remote Repo. 
		
			index.html 		===> 10 lines 	--> 10kb
			index.html 		===> +10 lines	--> 20kb
			
		Cloned this repo. 
		
		Local Repo  git pull (incremental Changes)
			index.html 		===> 10 lines 	--> 10kb	
								+10 lines	--> 10 kb
			
		clone again ::
		
		Local Repo 
			index.html 		===> 20 lines 	--> 20kb		
			
			git fetch 
			
	
		Install of GIT in Local Machine :::
		
		
Summary :

		GIT Fundamentals ::		
		GIT Installation ::

########################
Day - 4 | 13th Apr. 2023
########################

		GIT Local Repo.
			Misc. GIT Commands
			Branches 
		
		GIT Remote Repo 
		
		GIT BASH 	--> CLI 
		GIT GUI 	--> GUI
		
	
		Repository ==> Collection of files & Folders 
		
		
		git init ---> Initialize local git repo. 
						Create default branch - master / main
						
						
		Local Machine :
		
		Working Dir 		Staging/Index Area 				Local Repo.		
		
		
		Project :::
		
			index.jsp ---> CR# - Added login_func.
			
		-	Version Control 
		-	Tracking 
		
		- 	Parallel Development (Branching)
		
		git config ::
		
		Local git Config. :
		
			git config user.name "Loksai"
			git config user.email "loksai@xyz.com"

		Global git Config. :
		
			git config --global user.name "Loksai"
			git config --global user.email "loksai@xyz.com"
			
		Before the very first commit :: you should config. user.name & user.email 
		
		
		git add <fileName>
		git add *.doc 
		git add <f1> <f2> <f3>
		git add .
		
		
		git init 
		git add 
		git commit					>>> move to remote repo  
		
		git rm -f <file_Name> 
		git rm --cached <file_Name> 
		
		
		rm file1.txt 			jus remove physical file 
		git rm -f 
		
		ls 
		
		git status 
		
		git ls-files 
		
		git log 
		git log --stat 
		git log --oneline 
		git log -3
		
		git show 
	
		Scenario1 :::
		
		git diff 			chk the diff between working dir and committed files 
		
		Scenario2 :::
		
		git diff --cached 	chk the diff between staging area and committed files 
		
		Scenario 3 :::
		
		git diff <commit_ID> <commit_ID>
		
		files :::
		
		git ls-files  ==> 
		
		git ignore!
		
		Project_Folder ::
		
			Java_web_appln.
				src 
					sample.java
					signin.java			==> recv user_id & passwd and it interact with D_base -- (sql_query), credential 
					signup.java 
					index.jsp 
				test 
					sample.java 
				contents
					app_properties
					envi.ts
				credentials
				secrets
					
			
			git init 
			
			
			git add 
			git commit 					==> push to remote repo!
			
			
			Java_web_appln/dir1/sdir1
			
			dir/sdir1


Summary ::::
			
  501  cd d:
  502  mkdir DCP-10thApr
  503  cd DCP-10thApr/
  504  pwd
  505  mkdir samplerepo1
  506  cd samplerepo1/
  507  clear
  508  git init
  509  ls
  510  ls -a
  511  cd ..
  512  mkdir samplerepo2
  513  ls
  514  cd samplerepo2
  515  clear
  516  ls
  517  ls -a
  518  git init
  519  ls
  520  ls -a
  521  cd .git/
  522  ls
  523  clear
  524  ls
  525  ls -a
  526  cd ..
  527  ls
  528  ls -a
  529  clear
  530  cd d:
  531  cd DCP-10thApr/
  532  ls
  533  ls -a
  534  cd samplerepo1
  535  clear
  536  echo "Hello"
  537  echo "Record1" >> file1.txt
  538  cat file1.txt
  539  ls
  540  git status
  541  git add file1.txt
  542  git status
  543  git commit -m "Initial Commit Message"
  544  git status
  545  git log
  546  cd ..
  547  cd samplerepo2/
  548  clear
  549  ls
  550  echo "rec1" >> file1.txt
  551  git status
  552  git add file1.txt
  553  git status
  554  git commit -m "CM1"
  555  git log
  556  echo "rec1" >> file2.txt
  557  git status
  558  git add file2.txt
  559  git status
  560  git commit -m "CM2"
  561  git log
  562  git config --global user.email "loksai@xyzz.com"
  563  git status
  564  echo "rec1" >> file3.txt
  565  git status
  566  git add file3.txt
  567  git commit -m "CM3"
  568  git log
  569  echo "rec1" >> file4.txt
  570  git add .
  571  git commit -m "Added file4.txt "
  572  git log
  573  ls
  574  echo "rec1" >> s1.java
  575  echo "rec1" >> s2.txt
  576  echo "rec1" >> s3.md
  577  echo "rec1" >> s4.doc
  578  echo "rec1" >> s5.doc
  579  echo "rec1" >> s7.java
  580  git status
  581  git add s1.java
  582  git status
  583  git add *.doc
  584  git status
  585  git add .
  586  git status
  587  git commit -m "Created project files"
  588  git status
  589  clear
  590  echo "rec1" >> q1.txt
  591  git status
  592  ls
  593  git rm --cached q1.txt
  594  clear
  595  ls
  596  ls
  597  git status
  598  git add .
  599  git status
  600  git rm --cached q1.txt
  601  ls
  602  git status
  603  git add .
  604  git rm -f q1.txt
  605  ls
  606  echo "asdf" >> w1.txt
  607  git add .
  608  rm w1.txt
  609  ls
  610  git status
  611  clear
  612  git status
  613  git commit -m "asdfas"
  614  ls
  615  git ls-files
  616  clear
  617  git status
  618  clear
  619  cd ..
  620  cls
  621  clear
  622  cd samplerepo1
  623  ls
  624  git log
  625  git status
  626  clear
  627  echo "rec1" >> f1.txt
  628  git add .
  629  git commit -m "CM2"
  630  echo "rec1" >> f2.txt
  631  git add .
  632  git commit -m "CM3"
  633  echo "rec1" >> f3.txt
  634  git add .
  635  git commit -m "CM4"
  636  echo "rec1" >> f4.txt
  637  git add .
  638  git commit -m "CM5"
  639  echo "rec1" >> f5.txt
  640  git add .
  641  git commit -m "CM6"
  642  clear
  643  git log
  644  git log --oneline
  645  git log --oneline -2
  646  git log -2
  647  git log --stat
  648  git log --stat -2
  649  git log --oneline
  650  git show 1bffc7a
  651  ls
  652  git status
  653  cat f1.txt
  654  echo "record2" >> f1.txt
  655  git status
  656  git diff
  657  git add .
  658  git diff
  659  git diff --cached
  660  git status
  661  git commit -m "updated f1.txt"
  662  git diff
  663  git diff --cached
  664  git log --oneline
  665  git diff def916c 87dddba
  666  git diff 87dddba def916c
  667  clear
  668  ls
  669  git ls-files
  670  git status
  671  echo "rec1" >> s1.txt
  672  ls
  673  git ls-files
  674  git status
  675  git add .
  676  git ls-files
  677  touch w1.txt
  678  vi w1.txt
  679  cd ..
  680  ls
  681  cd samplerepo2/
  682  ls -a
  683  rm -rf .git/
  684  ls
  685  ls -a
  686  clear
  687  cd ..
  688  mkdir samplerepo3
  689  cd samplerepo3/
  690  ls
  691  git init
  692  ls -a
  693  clear
  694  vi .gitignore
  695  ls
  696  ls -a
  697  git status
  698  git add .
  699  git commit -m "Initial commit for .gitignore"
  700  git statsu
  701  git status
  702  cat .gitignore
  703  ls
  704  echo "rec1" >> s1.txt
  705  git status
  706  echo "rec1" >> q1.doc
  707  git status
  708  echo "rec1" >> sample5.txt
  709  git status
  710  clear
  711  clear
  712  history
  
  
	GIT --> 
	
	GIT Client --> git bash 
	
	remote GIT 
	
	GIT Server --> 	Github			VM -- GIT --> GUI 
					Gitlab 
					Az Repo
					AWS Code Commit 
					Bitbucket
	
  
########################
Day - 5 | 14th Apr. 2023
########################

		GIT Misc.
		
			reset 
			revert 
			commits
			
			branching techiques 
			remote repositories
		
		local repo. 
		
			commit --> 
			
			git reset ==> used to undo the commit(s) 
							will update the commit history 
							reset will remove the commits from the commit history.
							Hard option removes the commits and the changes permanently.
							reset will never create new commit point.
			
			HARD , MIXED* , SOFT 			
			
			git reset <option> <commit_ID> 
			
		git revert ::::
		
			git revert <commit_ID>
		
				revert will create new commit point.
				can be used in shared repo.
				at any point of time using the commit histroy we can get back the changes.
				
			Git Repo. are used for parallel Development 
			
				for multiple users .
				
				reset --> 
			
		prod - deployment  v1.3
				v1.1
				v1.2
				
				v1.3  == prod testing ==> 
				try to fix (4 - 6 hrs)
				
				revert the changes 
		
		v1.3.2 ===> latest deployment 
		v1.3.1 ===> reverted v1.3
		v1.3			revert 
		v1.2
		v1.1
		
		v1.3.2 ===> reverted v1.3.1
		v1.3.1 ===> reverted v1.3
		v1.3			# revert 
		v1.2
		v1.1
		
		
		git commit :
		
		
		commits 
		
		git commit -m "CR# / REL# - Actual Message"
		
		planning !
		
		git commit --amend -m "ASDFASD"
		
		Git Branching Techniques !!!
		
			Parallel Development ::::
			
			
			File1 ==> 
			
		git init :
		
			master --> cm1,cm2,cm3			==> PROD copy of src code. 
				
				feature_branch1 
				
		Git Branching Strategies ::::
		
		
			master ---> cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			===> Prod version
			
				Developer1 
				
					feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
					feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2			
			
_____________________________________________________________		
		
			master ---> cm1,cm2,cm3		

				Integration_Branch
				
					Developer1 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
						feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
						feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2
						
					Developer2 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
						feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
						feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2
						
_____________________________________________________________

			master ---> cm1,cm2,cm3	

				hotfix-Branch

				Realease_Branch 
				
					Integration_Branch1			Team1
					
						Developer1 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
							feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2
							
						Developer2 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
							feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2

					Integration_Branch2			Team2
					
						Developer1 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
							feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2
							
						Developer2 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
							feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2

					Integration_Branch3			Team3
					
						Developer1 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
							feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2
							
						Developer2 - cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							feature1 ---> cm1,cm2,cm3,f1cm1,f1cm2
							feature2 ---> cm1,cm2,cm3,f2cm1,f2cm2
	

			How to create Branches !!!
			
		
			Merge 
			
			Merge Conflict :::
			
				When/How the Merge Conflicts occurs ????
				
				How to resolve this Merge Conflict ?
				
					1. Identify the file(s) that is causing the merge conflict. -- > done
					2. Review the changes and decide whose changes has to be merged.
					3. Add the changes and 
					4. Commit the changes to the target Branch 
					
				We should avoid / prevent merge conflict!!!
				
					Review the changes before merge to avoid merge conflict.
					
					rebase ... 
					pull ...
					fetch ...
				
				
			project 
				signin.java ==> 
				
					dev1 -- email_validation
					dev2 -- email_validation & User_Validation
					
					
					execellent 1
						good  	0
					avg     	-1 
